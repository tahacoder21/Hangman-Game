import random  
import tkinter as tk  
from tkinter import messagebox  

class HangmanGame:  
    def __init__(self, master):  
        self.master = master  
        self.master.title("Hangman Game")  
        
        # List of words to choose from  
        self.words = ['python', 'hangman', 'programming', 'developer', 'challenge', 'computer', 'function']  
        self.word_to_guess = random.choice(self.words)  
        self.guessed_letters = []  
        self.incorrect_guesses = 0  
        self.max_incorrect_guesses = 6  

        self.word_completion = ['_' for _ in self.word_to_guess]  

        self.canvas = tk.Canvas(master, width=300, height=200)  
        self.canvas.pack()  

        self.word_label = tk.Label(master, text=' '.join(self.word_completion), font=("Helvetica", 16))  
        self.word_label.pack()  

        self.guess_entry = tk.Entry(master, font=("Helvetica", 16), width=5)  
        self.guess_entry.pack()  

        self.guess_button = tk.Button(master, text="Guess", command=self.make_guess, font=("Helvetica", 16))  
        self.guess_button.pack()  

        self.result_label = tk.Label(master, text='', font=("Helvetica", 14))  
        self.result_label.pack()  

        self.guessed_label = tk.Label(master, text='Guessed letters: ', font=("Helvetica", 14))  
        self.guessed_label.pack()  

    def make_guess(self):  
        guess = self.guess_entry.get().lower()  
        self.guess_entry.delete(0, tk.END)  

        if len(guess) != 1 or not guess.isalpha():  
            messagebox.showwarning("Invalid input", "Please enter a single alphabetic character.")  
            return  
        if guess in self.guessed_letters:  
            messagebox.showwarning("Already guessed", "You've already guessed that letter. Try again.")  
            return  

        self.guessed_letters.append(guess)  

        if guess in self.word_to_guess:  
            self.update_word_completion(guess)  
            self.word_label.config(text=' '.join(self.word_completion))  
            if '_' not in self.word_completion:  
                messagebox.showinfo("Congratulations!", f"You've guessed the word: {self.word_to_guess}")  
                self.reset_game()  
        else:  
            self.incorrect_guesses += 1  
            if self.incorrect_guesses >= self.max_incorrect_guesses:  
                messagebox.showinfo("Game Over", f"Sorry, you've run out of guesses. The word was: {self.word_to_guess}")  
                self.reset_game()  
        
        self.guessed_label.config(text='Guessed letters: ' + ', '.join(self.guessed_letters))  

    def update_word_completion(self, guessed_letter):  
        for index, letter in enumerate(self.word_to_guess):  
            if letter == guessed_letter:  
                self.word_completion[index] = letter  

    def reset_game(self):  
        self.word_to_guess = random.choice(self.words)  
        self.guessed_letters = []  
        self.incorrect_guesses = 0  
        self.word_completion = ['_' for _ in self.word_to_guess]  
        self.word_label.config(text=' '.join(self.word_completion))  
        self.guessed_label.config(text='Guessed letters: ')  
        
# Main application  
if __name__ == "__main__":  
    root = tk.Tk()  
    hangman_game = HangmanGame(root)  
    root.mainloop()
